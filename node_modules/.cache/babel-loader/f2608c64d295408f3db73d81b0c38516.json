{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Downloads/splyt-challenge/src/App.jsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport '../node_modules/antd/dist/antd.css';\nimport Map from \"./components/Map\";\nimport IntegerStep from './components/Slider'; // import data from './data/taxiData.json'\n\nimport dotenv from \"dotenv\";\ndotenv.config(); // const API_KEY = \"AIzaSyClQCAWogPIMdz1Od4YsXT0MTDk9fe3r9E\"\n// ####### OLD FETCH ######\n// const fetchDrivers = (count = 15) => {\n//   const url = `https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${count}`\n//   return fetch(url)\n//     .then(resp => resp.json)\n// }\n// ####### NEW FETCH CORS ######\n\nconst fetchDrivers = totalDrivers => {\n  const url = \"https://cors-anywhere.herokuapp.com/https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=\".concat(totalDrivers);\n  return fetch(url, {\n    headers: {\n      \"X-Requested-With\": \"none\"\n    }\n  }).then(resp => resp.json());\n};\n\nconst updateDrivers = count => {\n  fetchDrivers(this.state.count).then(data => this.setState({\n    allDrivers: data.drivers\n  }));\n};\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      totalDrivers: 50,\n      drivers: [],\n      allDrivers: []\n    };\n\n    this.onChange = value => {\n      this.setState({\n        count: value\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetchDrivers(this.state.count).then(data => this.setState({\n      allDrivers: data.drivers\n    })); // this.setState({\n    //   drivers: data.drivers\n    // })\n  }\n\n  render() {\n    // console.log('ENV KEY', process.env.REACT_APP_GOOGLE_MAPS_API_KEY)\n    const url = \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=\".concat(process.env.REACT_APP_GOOGLE_MAPS_API_KEY); // const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`\n\n    const lat = 51.5049375;\n    const lng = -0.0964509;\n    const drivers = this.state.drivers.slice(0, this.state.count);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Map, {\n      isMarkerShown: true,\n      googleMapURL: url,\n      lat: lat,\n      lng: lng,\n      drivers: drivers,\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" Loading... \"),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"600px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(IntegerStep, {\n      sliderCountChange: this.onChange,\n      count: this.state.count,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dev/Downloads/splyt-challenge/src/App.jsx"],"names":["React","Map","IntegerStep","dotenv","config","fetchDrivers","totalDrivers","url","fetch","headers","then","resp","json","updateDrivers","count","state","data","setState","allDrivers","drivers","App","Component","onChange","value","componentDidMount","render","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","lng","slice","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport '../node_modules/antd/dist/antd.css'\n\nimport Map from \"./components/Map\";\nimport IntegerStep from './components/Slider'\n// import data from './data/taxiData.json'\n\n\nimport dotenv from \"dotenv\";\ndotenv.config();\n\n// const API_KEY = \"AIzaSyClQCAWogPIMdz1Od4YsXT0MTDk9fe3r9E\"\n\n\n// ####### OLD FETCH ######\n// const fetchDrivers = (count = 15) => {\n//   const url = `https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${count}`\n//   return fetch(url)\n//     .then(resp => resp.json)\n// }\n\n// ####### NEW FETCH CORS ######\nconst fetchDrivers = (totalDrivers) => {\n  const url = `https://cors-anywhere.herokuapp.com/https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${totalDrivers}`;\n  return fetch(url, {\n    headers: {\n      \"X-Requested-With\": \"none\",\n    }\n  }).then(resp => resp.json());\n};\n\nconst updateDrivers = (count) => {\n  fetchDrivers(this.state.count)\n      .then(data => this.setState({\n        allDrivers: data.drivers\n      }))\n} \n\n\nclass App extends React.Component {\n  \n  state = {\n    count: 0,\n    totalDrivers: 50,\n    drivers: [],\n    allDrivers: []\n  }\n\n  componentDidMount() {\n    fetchDrivers(this.state.count)\n      .then(data => this.setState({\n        allDrivers: data.drivers\n      }))\n    // this.setState({\n    //   drivers: data.drivers\n    // })\n  }\n\n\n  onChange = value => {\n    this.setState({\n      count: value\n    });\n  };\n\n\n  render() {\n    // console.log('ENV KEY', process.env.REACT_APP_GOOGLE_MAPS_API_KEY)\n    const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`\n    // const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`\n    const lat = 51.5049375\n    const lng = -0.0964509\n    const drivers = this.state.drivers.slice(0, this.state.count)\n\n    return (\n      < div className=\"App\" >\n        <Map isMarkerShown={true}\n          googleMapURL={url}\n          lat={lat}\n          lng={lng}\n          drivers={drivers}\n          loadingElement={<div style={{ height: `100%` }}> Loading... </div>}\n          containerElement={<div style={{ height: `600px` }} />}\n          mapElement={<div style={{ height: `100%` }} />} />\n        < IntegerStep sliderCountChange={this.onChange} count={this.state.count} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}