{"ast":null,"code":"var _jsxFileName = \"/Users/dev/Downloads/splyt-challenge/src/App.jsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport '../node_modules/antd/dist/antd.css';\nimport Map from \"./components/Map\";\nimport IntegerStep from './components/Slider'; // import data from './data/taxiData.json'\n\nimport dotenv from \"dotenv\";\ndotenv.config(); // const API_KEY = \"AIzaSyClQCAWogPIMdz1Od4YsXT0MTDk9fe3r9E\"\n// ####### OLD FETCH ######\n// const fetchDrivers = (count = 15) => {\n//   const url = `https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${count}`\n//   return fetch(url)\n//     .then(resp => resp.json)\n// }\n// ####### NEW FETCH CORS ######\n\nconst fetchDrivers = count => {\n  const url = \"https://cors-anywhere.herokuapp.com/https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=\".concat(count);\n  return fetch(url, {\n    headers: {\n      \"X-Requested-With\": \"none\"\n    }\n  }).then(resp => resp.json());\n};\n\nconst updateDrivers = () => {\n  var _temp;\n\n  return _temp = class App extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        count: 50,\n        drivers: [],\n        allData: []\n      };\n\n      this.onChange = value => {\n        this.setState({\n          count: value\n        });\n      };\n    }\n\n    componentDidMount() {\n      fetchDrivers(this.state.count).then(data => this.setState({\n        allData: data.drivers\n      })); // this.setState({\n      //   drivers: data.drivers\n      // })\n    }\n\n    render() {\n      // console.log('ENV KEY', process.env.REACT_APP_GOOGLE_MAPS_API_KEY)\n      const url = \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=\".concat(process.env.REACT_APP_GOOGLE_MAPS_API_KEY); // const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`\n\n      const lat = 51.5049375;\n      const lng = -0.0964509;\n      const drivers = this.state.drivers.slice(0, this.state.count);\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Map, {\n        isMarkerShown: true,\n        googleMapURL: url,\n        lat: lat,\n        lng: lng,\n        drivers: drivers,\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \" Loading... \"),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: \"600px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(IntegerStep, {\n        sliderCountChange: this.onChange,\n        count: this.state.count,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    }\n\n  }, _temp;\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/dev/Downloads/splyt-challenge/src/App.jsx"],"names":["React","Map","IntegerStep","dotenv","config","fetchDrivers","count","url","fetch","headers","then","resp","json","updateDrivers","App","Component","state","drivers","allData","onChange","value","setState","componentDidMount","data","render","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","lat","lng","slice","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAO,oCAAP;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,WAAP,MAAwB,qBAAxB,C,CACA;;AAGA,OAAOC,MAAP,MAAmB,QAAnB;AACAA,MAAM,CAACC,MAAP,G,CAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAMC,GAAG,qJAA8ID,KAA9I,CAAT;AACA,SAAOE,KAAK,CAACD,GAAD,EAAM;AAChBE,IAAAA,OAAO,EAAE;AACP,0BAAoB;AADb;AADO,GAAN,CAAL,CAIJC,IAJI,CAICC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAJT,CAAP;AAKD,CAPD;;AASA,MAAMC,aAAa,GAAG;AAAA;;AAAA,iBAItB,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAAA;AAAA;AAAA,WAEhCC,KAFgC,GAExB;AACNV,QAAAA,KAAK,EAAE,EADD;AAENW,QAAAA,OAAO,EAAE,EAFH;AAGNC,QAAAA,OAAO,EAAE;AAHH,OAFwB;;AAAA,WAmBhCC,QAnBgC,GAmBrBC,KAAK,IAAI;AAClB,aAAKC,QAAL,CAAc;AACZf,UAAAA,KAAK,EAAEc;AADK,SAAd;AAGD,OAvB+B;AAAA;;AAQhCE,IAAAA,iBAAiB,GAAG;AAClBjB,MAAAA,YAAY,CAAC,KAAKW,KAAL,CAAWV,KAAZ,CAAZ,CACGI,IADH,CACQa,IAAI,IAAI,KAAKF,QAAL,CAAc;AAC1BH,QAAAA,OAAO,EAAEK,IAAI,CAACN;AADY,OAAd,CADhB,EADkB,CAKlB;AACA;AACA;AACD;;AAUDO,IAAAA,MAAM,GAAG;AACP;AACA,YAAMjB,GAAG,mGAA4FkB,OAAO,CAACC,GAAR,CAAYC,6BAAxG,CAAT,CAFO,CAGP;;AACA,YAAMC,GAAG,GAAG,UAAZ;AACA,YAAMC,GAAG,GAAG,CAAC,SAAb;AACA,YAAMZ,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBa,KAAnB,CAAyB,CAAzB,EAA4B,KAAKd,KAAL,CAAWV,KAAvC,CAAhB;AAEA,aACE;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,aAAa,EAAE,IAApB;AACE,QAAA,YAAY,EAAEC,GADhB;AAEE,QAAA,GAAG,EAAEqB,GAFP;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,OAAO,EAAEZ,OAJX;AAKE,QAAA,cAAc,EAAE;AAAK,UAAA,KAAK,EAAE;AAAEc,YAAAA,MAAM;AAAR,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BALlB;AAME,QAAA,gBAAgB,EAAE;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM;AAAR,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANpB;AAOE,QAAA,UAAU,EAAE;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM;AAAR,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE,oBAAE,WAAF;AAAc,QAAA,iBAAiB,EAAE,KAAKZ,QAAtC;AAAgD,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWV,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF;AAaD;;AA/C+B,GAJZ;AAAA,CAAtB;;AAsDA,eAAeQ,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport '../node_modules/antd/dist/antd.css'\n\nimport Map from \"./components/Map\";\nimport IntegerStep from './components/Slider'\n// import data from './data/taxiData.json'\n\n\nimport dotenv from \"dotenv\";\ndotenv.config();\n\n// const API_KEY = \"AIzaSyClQCAWogPIMdz1Od4YsXT0MTDk9fe3r9E\"\n\n\n// ####### OLD FETCH ######\n// const fetchDrivers = (count = 15) => {\n//   const url = `https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${count}`\n//   return fetch(url)\n//     .then(resp => resp.json)\n// }\n\n// ####### NEW FETCH CORS ######\nconst fetchDrivers = (count) => {\n  const url = `https://cors-anywhere.herokuapp.com/https://qa-interview-test.qa.splytech.io/api/drivers?latitude=51.5049375&longitude=-0.0964509&count=${count}`;\n  return fetch(url, {\n    headers: {\n      \"X-Requested-With\": \"none\",\n    }\n  }).then(resp => resp.json());\n};\n\nconst updateDrivers = () =>  \n\n\n\nclass App extends React.Component {\n  \n  state = {\n    count: 50,\n    drivers: [],\n    allData: []\n  }\n\n  componentDidMount() {\n    fetchDrivers(this.state.count)\n      .then(data => this.setState({\n        allData: data.drivers\n      }))\n    // this.setState({\n    //   drivers: data.drivers\n    // })\n  }\n\n\n  onChange = value => {\n    this.setState({\n      count: value\n    });\n  };\n\n\n  render() {\n    // console.log('ENV KEY', process.env.REACT_APP_GOOGLE_MAPS_API_KEY)\n    const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`\n    // const url = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}`\n    const lat = 51.5049375\n    const lng = -0.0964509\n    const drivers = this.state.drivers.slice(0, this.state.count)\n\n    return (\n      < div className=\"App\" >\n        <Map isMarkerShown={true}\n          googleMapURL={url}\n          lat={lat}\n          lng={lng}\n          drivers={drivers}\n          loadingElement={<div style={{ height: `100%` }}> Loading... </div>}\n          containerElement={<div style={{ height: `600px` }} />}\n          mapElement={<div style={{ height: `100%` }} />} />\n        < IntegerStep sliderCountChange={this.onChange} count={this.state.count} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}